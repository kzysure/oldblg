{"meta":{"title":"生睿的杂物堆","subtitle":"多半是自言自语，如有错误欢迎指正。","description":null,"author":"生睿","url":"http://www.kzysure.cn"},"pages":[{"title":"","date":"2018-06-15T02:17:05.902Z","updated":"2018-05-18T10:03:43.167Z","comments":false,"path":"categories/index.html","permalink":"http://www.kzysure.cn/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-06-15T02:17:05.901Z","updated":"2018-05-18T10:03:27.099Z","comments":true,"path":"tags/index.html","permalink":"http://www.kzysure.cn/tags/index.html","excerpt":"","text":"layout:tags comments:false"}],"posts":[{"title":"Java/JDK动态代理","slug":"Java-JDK动态代理","date":"2018-07-26T05:39:24.000Z","updated":"2018-07-26T05:51:50.021Z","comments":true,"path":"2018/07/26/Java-JDK动态代理/","link":"","permalink":"http://www.kzysure.cn/2018/07/26/Java-JDK动态代理/","excerpt":"","text":"创建JDK动态代理需要先实现InvocationHandler接口，并重写其中的invoke方法，具体步骤如下： 创建一个Animal动物接口(准备步骤一)1234567891011121314151617public interface AminalInterface &#123; /** * 跑 */ void run(); /** * 吃 */ void eat(); /** * 唱歌 */ void sing();&#125; 创建一个Cat类并实现Animal1234567891011121314151617181920212223242526272829303132public class Cat implements AminalInterface &#123; private String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Cat(String name) &#123; this.name = name; &#125; @Override public void run() &#123; System.out.println(getName()+\"is running\"); &#125; @Override public void eat() &#123; System.out.println(getName()+\"like eating fish\"); &#125; @Override public void sing() &#123; System.out.println(getName()+\"say ~mia~mia~mia\"); &#125;&#125;` 创建一个类实现InvocationHandler接口。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class CatProxy implements InvocationHandler &#123; /** * 代理类持有的委托类对象引用 */ private Object object; /** * 接口调用次数 */ private int num; /** * 构造函数 * @param object */ public CatProxy(Object object) &#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; if (!doBefore(method))&#123; return null; &#125; // 利用反射机制处理请求 Object result = method.invoke(object,args); doAfter(method); return result; &#125; /** * 拦截器 * @param method * @return boolean */ private Boolean doBefore(Method method)&#123; System.out.println(\"我是代理，拦截到请求\"); if (method.getName().equals(\"run\"))&#123; System.out.println(\"猫受伤了，不能跑\"); return false; &#125; return true; &#125; private void doAfter(Method method)&#123; System.out.println(\"代理处理完毕\"); &#125;&#125; 给Proxy类提供委托类的ClassLoader和Interfaces来创建动态代理类,利用反射机制得到动态代理类的构造函数,利用动态代理类的构造函数创建动态代理类对象。123456789101112131415161718192021public class CatNewProxyFactory &#123;// 构建工厂类 public static AminalInterface getInstance(String name)&#123; AminalInterface cat = new Cat(name); InvocationHandler handler = new CatProxy(cat); AminalInterface proxy = null; proxy = (AminalInterface)Proxy.newProxyInstance( cat.getClass().getClassLoader(), cat.getClass().getInterfaces(), handler ); return proxy; &#125; public static void main(String[] args) &#123; AminalInterface cat1 = CatNewProxyFactory.getInstance(\"盒子(我家的猫)\"); cat1.run(); cat1.sing(); cat1.eat(); &#125;&#125; 输出结果:12345678我是代理，拦截到请求猫受伤了，不能跑我是代理，拦截到请求盒子(我家的猫)say ~mia~mia~mia代理处理完毕我是代理，拦截到请求盒子(我家的猫)like eating fish代理处理完毕","categories":[],"tags":[]},{"title":"HttpClient封装类","slug":"HttpClient封装类","date":"2018-07-24T01:34:27.000Z","updated":"2018-07-24T01:37:26.385Z","comments":true,"path":"2018/07/24/HttpClient封装类/","link":"","permalink":"http://www.kzysure.cn/2018/07/24/HttpClient封装类/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167package indo.kzysure.common; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map; import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.StatusLine;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import org.apache.log4j.Logger; /** * HttpClient工具类 */public class HttpUtil &#123; private static Logger logger = Logger.getLogger(HttpUtil.class); /** * get请求 * @return */ public static String doGet(String url) &#123; try &#123; HttpClient client = new DefaultHttpClient(); //发送get请求 HttpGet request = new HttpGet(url); HttpResponse response = client.execute(request); /**请求发送成功，并得到响应**/ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123; /**读取服务器返回过来的json字符串数据**/ String strResult = EntityUtils.toString(response.getEntity()); return strResult; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * post请求(用于key-value格式的参数) * @param url * @param params * @return */ public static String doPost(String url, Map params)&#123; BufferedReader in = null; try &#123; // 定义HttpClient HttpClient client = new DefaultHttpClient(); // 实例化HTTP方法 HttpPost request = new HttpPost(); request.setURI(new URI(url)); //设置参数 List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;(); for (Iterator iter = params.keySet().iterator(); iter.hasNext();) &#123; String name = (String) iter.next(); String value = String.valueOf(params.get(name)); nvps.add(new BasicNameValuePair(name, value)); //System.out.println(name +\"-\"+value); &#125; request.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8)); HttpResponse response = client.execute(request); int code = response.getStatusLine().getStatusCode(); if(code == 200)&#123; //请求成功 in = new BufferedReader(new InputStreamReader(response.getEntity() .getContent(),\"utf-8\")); StringBuffer sb = new StringBuffer(\"\"); String line = \"\"; String NL = System.getProperty(\"line.separator\"); while ((line = in.readLine()) != null) &#123; sb.append(line + NL); &#125; in.close(); return sb.toString(); &#125; else&#123; // System.out.println(\"状态码：\" + code); return null; &#125; &#125; catch(Exception e)&#123; e.printStackTrace(); return null; &#125; &#125; /** * post请求（用于请求json格式的参数） * @param url * @param params * @return */ public static String doPost(String url, String params) throws Exception &#123; CloseableHttpClient httpclient = HttpClients.createDefault(); HttpPost httpPost = new HttpPost(url);// 创建httpPost httpPost.setHeader(\"Accept\", \"application/json\"); httpPost.setHeader(\"Content-Type\", \"application/json\"); String charSet = \"UTF-8\"; StringEntity entity = new StringEntity(params, charSet); httpPost.setEntity(entity); CloseableHttpResponse response = null; try &#123; response = httpclient.execute(httpPost); StatusLine status = response.getStatusLine(); int state = status.getStatusCode(); if (state == HttpStatus.SC_OK) &#123; HttpEntity responseEntity = response.getEntity(); String jsonString = EntityUtils.toString(responseEntity); return jsonString; &#125; else&#123; logger.error(\"请求返回:\"+state+\"(\"+url+\")\"); &#125; &#125; finally &#123; if (response != null) &#123; try &#123; response.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; try &#123; httpclient.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; return null; &#125; &#125;","categories":[],"tags":[]},{"title":"Linux/Mac 通过控制台快速修改mysql密码","slug":"快速修改mysql密码","date":"2018-07-19T03:16:35.000Z","updated":"2018-07-19T03:50:45.573Z","comments":true,"path":"2018/07/19/快速修改mysql密码/","link":"","permalink":"http://www.kzysure.cn/2018/07/19/快速修改mysql密码/","excerpt":"","text":"此方法适用于Mac/Linux平台1mysqladmin -u root -p password \"newpassword\" 然后输入原来的密码1Enter password: [oldpassword]","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-18T09:16:49.989Z","updated":"2018-05-18T09:16:49.990Z","comments":true,"path":"2018/05/18/hello-world/","link":"","permalink":"http://www.kzysure.cn/2018/05/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}